View(covidVeriUlkeler)
#Isı haritası düşük değerler için mavi, yüksek değerler için kırmızı seç.
renk1 <- "blue"
renk2 <- "red"
# geom_tile, yeni vakalar sütunu ile ısı haritası(heatmap) çizdir.
#ggplot ile x ekseni tarih y ekseni ülkeler olmak üzere tablo çiz.
ggplot(covidVeriUlkeler, aes(x=date, y=location))
#geom_tile() ile günlük vakaları göster
ggplot(covidVeriUlkeler, aes(x=date, y=location)) +
geom_tile(aes(fill=new_cases))
#ısı haritasının düşük rengini renk1 yüksek rengini renk2 yap ve renk ton geçişleri sürekli olsun
ggplot(covidVeriUlkeler, aes(x=date, y=location)) +
geom_tile(aes(fill=new_cases)) +
scale_fill_continuous(low = renk1, high = renk2)
#her günlük veri miktarını ilgili kareye yaz
ggplot(covidVeriUlkeler, aes(x=date, y=location)) +
geom_tile(aes(fill=new_cases)) +
scale_fill_continuous(low = renk1, high = renk2)+
geom_text(aes(label = round(new_cases/1000)))
#x eksenini tarih olarak ölçeklendir ve  gün-ay olarak etiketle gösterim aralığı 1 gün yap.
ggplot(covidVeriUlkeler, aes(x=date, y=location)) +
geom_tile(aes(fill=new_cases)) +
scale_fill_continuous(low = renk1, high = renk2)+
geom_text(aes(label = round(new_cases/1000))) +
scale_x_date(date_labels =  "%d-%m", date_breaks = "1 day")
#etiketler: x ekseni tarih, y ekseni ülke olsun, başlık ve alt başlık yaz, altta da bilgi göster
ggplot(covidVeriUlkeler, aes(x=date, y=location)) +
geom_tile(aes(fill=new_cases)) +
scale_fill_continuous(low = renk1, high = renk2)+
geom_text(aes(label = round(new_cases/1000))) +
scale_x_date(date_labels =  "%d-%m", date_breaks = "1 day") +
labs(x = "Tarih", y = "Ülke",
title = "COVID-19 Yeni Vaka Isı Haritası",
subtitle = "15.12.2020'den bugüne COVID-19 günlük vaka grafiği",
caption = "Kaynak: https://covid.ourworldindata.org/data/owid-covid-data.csv")
#tema ekle
ggplot(covidVeriUlkeler, aes(x=date, y=location)) +
geom_tile(aes(fill=new_cases)) +
scale_fill_continuous(low = renk1, high = renk2)+
geom_text(aes(label = round(new_cases/1000))) +
scale_x_date(date_labels =  "%d-%m", date_breaks = "1 day") +
labs(x = "Tarih", y = "Ülke",
title = "COVID-19 Yeni Vaka Isı Haritası",
subtitle = "15.12.2020'den bugüne COVID-19 günlük vaka grafiği",
caption = "Kaynak: https://covid.ourworldindata.org/data/owid-covid-data.csv")+
theme_light()
#tema bileşenlerini renklendirelim
ggplot(covidVeriUlkeler, aes(x=date, y=location)) +
geom_tile(aes(fill=new_cases)) +
scale_fill_continuous(low = renk1, high = renk2)+
geom_text(aes(label = round(new_cases/1000))) +
scale_x_date(date_labels =  "%d-%m", date_breaks = "1 day") +
labs(x = "Tarih", y = "Ülke",
title = "COVID-19 Yeni Vaka Isı Haritası",
subtitle = "15.12.2020'den bugüne COVID-19 günlük vaka grafiği",
caption = "Kaynak: https://covid.ourworldindata.org/data/owid-covid-data.csv")+
theme_light() +
theme(
plot.title = element_text(color = "red", face = "bold"),
plot.subtitle = element_text(color = "blue"),
plot.caption = element_text(color = "brown",  face = "italic")) +
theme(axis.text.x=element_text(angle=90))
#covid-19 verisini al.
covid19 <- read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv")
View(covid19)
#15.12.2020 tarihi sonrası TÜrkiye, Fransa, İtalya, Almanya, İspanya, İngiltere
#verilerini seç.
covidVeriUlkeler <- filter(covid19, date >= "2020-11-15" |
location == "Turkey" | location == "France" |
location == "Italy" | location == "Germany" |
location == "Spain" | location == "United Kingdom")
View(covid19)
covidVeriUlkeler <- filter(covid19, date >= "2020-11-15")
#15.12.2020 tarihi sonrası TÜrkiye, Fransa, İtalya, Almanya, İspanya, İngiltere
#verilerini seç.
covidVeriUlkeler <- filter(covid19, date >= "2020-11-15")
library(readr)
library(ggplot2)
covid19 <- read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv")
View(covid19)
#15.12.2020 tarihi sonrası TÜrkiye, Fransa, İtalya, Almanya, İspanya, İngiltere
#verilerini seç.
covidVeriUlkeler <- filter(covid19, date >= "2020-11-15")
#15.12.2020 tarihi sonrası TÜrkiye, Fransa, İtalya, Almanya, İspanya, İngiltere
#verilerini seç.
covidVeriUlkeler <- data.frame(covid19)
covidVeriUlkeler <- filter(covidVeriUlkeler, date >= "2020-11-15")
covidVeriUlkeler <- filter(covidVeriUlkeler, date > "2020-11-15")
library(readr)
library(ggplot2)
#covid-19 verisini al.
covid19 <- read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv")
#15.12.2020 tarihi sonrası TÜrkiye, Fransa, İtalya, Almanya, İspanya, İngiltere
#verilerini seç.
covidVeriUlkeler <- data.frame(covid19)
covidVeriUlkeler <- filter(covidVeriUlkeler, date > "2020-11-15")
#15.12.2020 tarihi sonrası TÜrkiye, Fransa, İtalya, Almanya, İspanya, İngiltere
#verilerini seç.
covidVeriUlkeleri <- data.frame(covid19)
covidVeriUlkeler <- filter(covidVeriUlkeleri, date > "2020-11-15")
covidVeriUlkeler <- filter(covidVeriUlkeleri, date > 2020-11-15)
data("mtcars")
View(mtcars)
View(mtcars)
#load reshape2 package to use melt() function
library(reshape2)
#melt mtcars into long format
melt_mtcars <- melt(mtcars)
#load reshape2 package to use melt() function
library(reshape2)
#melt mtcars into long format
melt_mtcars <- melt(mtcars)
melt_mtcars
melt_mtcars
View(melt_mtcars)
str(mtcars)
data("mtcars")
View(mtcars)
str(mtcars)
#mdeğişkenler 2 sütuna ayır değişken adı - değeri
mtcars_sutun_deger <- melt(mtcars)
View(mtcars_sutun_deger)
View(mtcars_sutun_deger)
#tabloda değişken olmayan araç adlarını sutun olarak ekle
#mtcars'ta toplam 11 değişken sutunu değeri vardı
mtcars_sutun_deger$araba <-rep(row.names(mtcars),11)
View(mtcars_sutun_deger)
View(mtcars)
View(mtcars_sutun_deger)
dusukRenk = "blue"
yuksekRenk = "red"
ggplot(mtcars_sutun_deger, aes(variable, car))
ggplot(mtcars_sutun_deger, aes(variable, araba))
ggplot(mtcars_sutun_deger, aes(özellikler, araba)) +
geom_tile(aes(fill = deger))
ggplot(mtcars_sutun_deger, aes(ozellikler, araba)) +
geom_tile(aes(fill = deger))
View(mtcars_sutun_deger)
# ısı haritası için en az 3 değişkene ihtiyaç vardır.
#mdeğişkenler 2 sütuna ayır değişken adı - değeri
mtcars_sutun_deger <- melt(mtcars)
View(mtcars_sutun_deger)
#tabloda değişken olmayan araç adlarını sutun olarak ekle
#mtcars'ta toplam 11 değişken sutunu değeri vardı hersutun sayısı
mtcars_sutun_deger$araba <-rep(row.names(mtcars),11)
View(mtcars_sutun_deger)
colnames(mtcars_sutun_deger) = c("ozellikler", "deger", "araba")
View(mtcars_sutun_deger)
#ısı haritasında düşük değerler için mavi yüksek değerler için kırmızı göster
dusukRenk = "blue"
yuksekRenk = "red"
ggplot(mtcars_sutun_deger, aes(ozellikler, araba)) +
geom_tile(aes(fill = deger))
#düşük ve yüksek renkleri seçtiğimiz renklerimiz olarak değişir.
ggplot(mtcars_sutun_deger, aes(ozellikler, araba)) +
geom_tile(aes(fill = deger)) +
scale_fill_continuous(low = renk1, high = renk2)
#düşük ve yüksek renkleri seçtiğimiz renklerimiz olarak değişir.
ggplot(mtcars_sutun_deger, aes(ozellikler, araba)) +
geom_tile(aes(fill = deger)) +
scale_fill_continuous(low = dusukRenk, high = yuksekRenk)
ggplot(mtcars_sutun_deger, aes(ozellikler, araba)) +
geom_tile(aes(fill = deger)) +
scale_fill_continuous(low = dusukRenk, high = yuksekRenk) +
geom_text(aes(label = deger))
#her kutunun değerini yaz
ggplot(mtcars_sutun_deger, aes(ozellikler, araba)) +
geom_tile(aes(fill = deger)) +
scale_fill_continuous(low = dusukRenk, high = yuksekRenk) +
geom_text(aes(label = deger), color = "white")
ggplot(mtcars_sutun_deger, aes(ozellikler, araba)) +
geom_tile(aes(fill = deger)) +
scale_fill_continuous(low = dusukRenk, high = yuksekRenk) +
geom_text(aes(label = deger))
# grafiğin dış etiketlerini ekle
ggplot(mtcars_sutun_deger, aes(ozellikler, araba)) +
geom_tile(aes(fill = deger)) +
scale_fill_continuous(low = dusukRenk, high = yuksekRenk) +
geom_text(aes(label = deger)) +
labs(x = "Arabaların Özellikleri", y = "Araba Modeli",
title = "mtcars Isı Haritası",
subtitle = "Örnek ısı haritası grafiğidir",
caption = "Veri seti: mtcar")
# tema ekle
ggplot(mtcars_sutun_deger, aes(ozellikler, araba)) +
geom_tile(aes(fill = deger)) +
scale_fill_continuous(low = dusukRenk, high = yuksekRenk) +
geom_text(aes(label = deger)) +
labs(x = "Arabaların Özellikleri", y = "Araba Modeli",
title = "mtcars Isı Haritası",
subtitle = "Örnek ısı haritası grafiğidir",
caption = "Veri seti: mtcar") +
theme_light() +
theme(
plot.title = element_text(color = "red", face = "bold"),
plot.subtitle = element_text(color = "blue"),
plot.caption = element_text(color = "brown",  face = "italic")) +
theme(axis.text.x=element_text(angle=90))
ggplot(mtcars_sutun_deger, aes(ozellikler, araba)) +
geom_tile(aes(fill = deger)) +
scale_fill_continuous(low = dusukRenk, high = yuksekRenk) +
geom_text(aes(label = deger)) +
labs(x = "Arabaların Özellikleri", y = "Araba Modeli",
title = "mtcars Isı Haritası",
subtitle = "Örnek ısı haritası grafiğidir",
caption = "Veri seti: mtcar") +
theme_test() +
theme(
plot.title = element_text(color = "red", face = "bold"),
plot.subtitle = element_text(color = "blue"),
plot.caption = element_text(color = "brown",  face = "italic")) +
theme(axis.text.x=element_text(angle=90))
# tema ekle
ggplot(mtcars_sutun_deger, aes(ozellikler, araba)) +
geom_tile(aes(fill = deger)) +
scale_fill_continuous(low = dusukRenk, high = yuksekRenk) +
geom_text(aes(label = deger)) +
labs(x = "Arabaların Özellikleri", y = "Araba Modeli",
title = "mtcars Isı Haritası",
subtitle = "Örnek ısı haritası grafiğidir",
caption = "Veri seti: mtcar") +
theme_dark() +
theme(
plot.title = element_text(color = "red", face = "bold"),
plot.subtitle = element_text(color = "blue"),
plot.caption = element_text(color = "brown",  face = "italic")) +
theme(axis.text.x=element_text(angle=90))
library(osmdata)
# library(ggplot2)
# key value pair olarak tüm fiziksel nesneleri içerir.
#(yollar, restoranlar, okullar, dükkanlar, nehirler, parklar, trafik lambaları, metro istasyonları..vs) içerir.
# var olan özellikler göster.
View(available_features())
# var olan tagler- örn: dükkanlar
View(available_tags("shop"))
# getbb getboundingbox-> şehri seç x:boylam(longitude) y:enlem(latitude)
# [bbox:south,west,north,east]
izmir <- getbb("Izmir")
izmir
# izmirin uç koordinatlarını adlandır.
bati <- izmir[1,1]
dogu <- izmir[1,2]
guney <- izmir[2,1]
kuzey <- izmir[2,2]
# izmirdeki yerleri seçmek için https://rdrr.io/cran/osmdata/man/opq.html overpassquery opq()
# Overpass API (OSM Server Side Scripting) openstreetmaps'in serverside API .
# default response XML olup, json ve csv desteği vardır.
sokaklar <- izmir %>%
opq()%>%
add_osm_feature(key = "highway",
value = c("motorway", "primary",
"secondary", "tertiary")) %>%
osmdata_sf()
View(sokaklar)
# izmirdeki yerleri seçmek için https://rdrr.io/cran/osmdata/man/opq.html overpassquery opq()
# Overpass API (OSM Server Side Scripting) openstreetmaps'in serverside API .
# default response XML olup, json ve csv desteği vardır.
sokaklar <- izmir %>%
opq()%>%
add_osm_feature(key = "highway",
value = c("motorway", "primary",
"secondary", "tertiary")) %>%
osmdata_sf()
str(sokaklar)
#sokak bilgilerini göster
sokaklar
ggplot() +
geom_sf(data = sokaklar$osm_lines,
inherit.aes = FALSE,
color = "gray",
size = .6,
alpha = .6) +
coord_sf(xlim = c(bati, dogu),
ylim = c(guney, kuzey),
expand = TRUE)
ggplot() +
geom_sf(data = sokaklar$osm_lines,
inherit.aes = FALSE,
color = "gray",
size = .6,
alpha = .6) +
geom_sf(data = kuyumcu$osm_points,
inherit.aes = FALSE,
color = "blue",
size = 1,
alpha = .8) +
coord_sf(xlim = c(bati, dogu),
ylim = c(guney, kuzey),
expand = FALSE)
# izmirdeki kuyumcuların noktalarını belirle
kuyumcu <- izmir %>%
opq()%>%
add_osm_feature(key = "shop",
value = c("jewelry")) %>%
osmdata_sf()
kuyumcu
# izmirdeki metro istasyonlarının noktalarını belirle
metro_istasyonlari <- izmir %>%
opq()%>%
add_osm_feature(key = "station",
value = c("subway")) %>%
osmdata_sf()
metro_istasyonlari
ggplot() +
geom_sf(data = sokaklar$osm_lines,
inherit.aes = FALSE,
color = "gray",
size = .6,
alpha = .6) +
geom_sf(data = kuyumcu$osm_points,
inherit.aes = FALSE,
color = "blue",
size = 1,
alpha = .8) +
coord_sf(xlim = c(bati, dogu),
ylim = c(guney, kuzey),
expand = FALSE)
ggplot() +
geom_sf(data = sokaklar$osm_lines,
inherit.aes = FALSE,
color = "gray",
size = .6,
alpha = .6) +
geom_sf(data = kuyumcu$osm_points,
inherit.aes = FALSE,
color = "blue",
size = 1,
alpha = .8) +
geom_sf(data = metro_istasyonlari$osm_lines,
inherit.aes = FALSE,
color = "red",
size = 1.2,
alpha = .6) +
coord_sf(xlim = c(bati, dogu),
ylim = c(guney, kuzey),
expand = FALSE)
#metro istasyonlarını ekle
ggplot() +
geom_sf(data = sokaklar$osm_lines,
inherit.aes = FALSE,
color = "gray",
size = .6,
alpha = .6) +
geom_sf(data = kuyumcu$osm_points,
inherit.aes = FALSE,
color = "blue",
size = 1,
alpha = .8) +
geom_sf(data = metro_istasyonlari$osm_lines,
inherit.aes = FALSE,
color = "red",
size = 1.2,
alpha = .6) +
coord_sf(xlim = c(bati, dogu),
ylim = c(guney, kuzey),
expand = FALSE)
# izmirdeki kuyumcuların noktalarını belirle
kuyumcu <- izmir %>%
opq()%>%
add_osm_feature(key = "shop",
value = c("jewelry")) %>%
osmdata_sf()
kuyumcu
# izmirdeki metro istasyonlarının noktalarını belirle
metro_istasyonlari <- izmir %>%
opq()%>%
add_osm_feature(key = "station",
value = c("subway")) %>%
osmdata_sf()
metro_istasyonlari
#metro istasyonlarını ekle
ggplot() +
geom_sf(data = sokaklar$osm_points,
inherit.aes = FALSE,
color = "gray",
size = .6,
alpha = .6) +
geom_sf(data = kuyumcu$osm_points,
inherit.aes = FALSE,
color = "blue",
size = 1,
alpha = .8) +
geom_sf(data = metro_istasyonlari$osm_lines,
inherit.aes = FALSE,
color = "red",
size = 1.2,
alpha = .6) +
coord_sf(xlim = c(bati, dogu),
ylim = c(guney, kuzey),
expand = FALSE)
# getbb getboundingbox-> şehri seç x:boylam(longitude) y:enlem(latitude)
# [bbox:south,west,north,east]
izmir <- getbb("Londra")
izmir <- getbb("Londra")
izmir
# izmirin uç koordinatlarını adlandır.
bati <- izmir[1,1]
dogu <- izmir[1,2]
guney <- izmir[2,1]
kuzey <- izmir[2,2]
# izmirdeki yerleri seçmek için https://rdrr.io/cran/osmdata/man/opq.html overpassquery opq()
# Overpass API (OSM Server Side Scripting) openstreetmaps'in serverside API .
# default response XML olup, json ve csv desteği vardır.
sokaklar <- izmir %>%
opq()%>%
add_osm_feature(key = "highway",
value = c("motorway", "primary",
"secondary", "tertiary")) %>%
osmdata_sf()
#sokak bilgilerini göster
sokaklar
# izmirdeki kuyumcuların noktalarını belirle
kuyumcu <- izmir %>%
opq()%>%
add_osm_feature(key = "shop",
value = c("jewelry")) %>%
osmdata_sf()
kuyumcu
# izmirdeki metro istasyonlarının noktalarını belirle
metro_istasyonlari <- izmir %>%
opq()%>%
add_osm_feature(key = "station",
value = c("subway")) %>%
osmdata_sf()
metro_istasyonlari
ggplot() +
geom_sf(data = sokaklar$osm_lines,
inherit.aes = FALSE,
color = "gray",
size = .6,
alpha = .6) +
geom_sf(data = kuyumcu$osm_points,
inherit.aes = FALSE,
color = "blue",
size = 1,
alpha = .8) +
geom_sf(data = metro_istasyonlari$osm_lines,
inherit.aes = FALSE,
color = "red",
size = 1.2,
alpha = .6) +
coord_sf(xlim = c(bati, dogu),
ylim = c(guney, kuzey),
expand = FALSE)
ggplot() +
geom_sf(data = sokaklar$osm_lines,
inherit.aes = FALSE,
color = "gray",
size = .6,
alpha = .6) +
geom_sf(data = kuyumcu$osm_points,
inherit.aes = FALSE,
color = "blue",
size = 1,
alpha = .8) +
geom_sf(data = metro_istasyonlari$osm_lines,
inherit.aes = FALSE,
color = "red",
size = 1.2,
alpha = .6) +
coord_sf(xlim = c(bati, dogu),
ylim = c(guney, kuzey),
expand = FALSE)
ggplot() +
geom_sf(data = sokaklar$osm_lines,
inherit.aes = FALSE,
color = "gray",
size = .6,
alpha = .6) +
coord_sf(xlim = c(bati, dogu),
ylim = c(guney, kuzey),
expand = FALSE)
str(mtcars)
data("mtcars")
str(mtcars)
View(mtcars)
iris
colnames(iris)=c("Ta?_yapra??_Boyu","Ta?_yapra??_Eni","?anak_yapra??_boyu","?anak_yapra??_Eni","t?r?")
str(iris)
data("diamonds")
data(diamonds)
# ilgili kütüphaneler i dahil et
library(ggplot2)
data(diamonds)
renklerim <- c("navy", "blue", "yellow", "orange", "red")
ggplot(aes(x = clarity, y = price, group = cut, fill = cut)) +
geom_violin() +
scale_fill_manual(values = renklerim)
library(tidyverse)
library(osmdata)
izmir <- getbb("Izmir")
izmir
bati <- izmir[1,1]
dogu <- izmir[1,2]
guney <- izmir[2,1]
kuzey <- izmir[2,2]
sokaklar <- izmir %>%
opq()%>%
add_osm_feature(key = "highway",
value = c("motorway", "primary",
"secondary", "tertiary")) %>%
osmdata_sf()
sokaklar
ggplot() +
geom_sf(data = sokaklar$osm_lines,
inherit.aes = FALSE,
color = "gray",
size = .6,
alpha = .8) +
coord_sf(xlim = c(bati, dogu),
ylim = c(guney, kuzey),
expand = FALSE)
